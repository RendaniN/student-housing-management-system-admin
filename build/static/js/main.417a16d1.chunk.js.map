{"version":3,"sources":["env.js","components/ComponentRow.js","App.js","serviceWorker.js","index.js"],"names":["env","url","ComplaintRow","state","replay","closeComplaint","axios","post","concat","qs","stringify","complaint_id","_this","props","complaint","id","then","response","fetchStuff","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","replayToComplaint","_this2","this","react_default","a","createElement","Table","Row","key","disabled","status","Cell","title","description","created_at","student","name","Form","onSubmit","data","TextArea","rows","autoHeight","onChange","e","setState","target","value","style","styles","tableTextArea","Button","type","size","fluid","inverted","color","onClick","Component","borderRadius","width","App","navActiveItem","menuActiveItem","studentName","studentEmail","studentPassword","creatingStudentAccount","complaints","handleNaveItemClick","_ref","handleMenuItemClick","_ref2","_callee","regenerator_default","wrap","_context","prev","next","sent","console","log","stop","createStudnet","_callee2","email","password","password_confirmation","_context2","preventDefault","catch","error","renderComplaintsMenu","map","ComponentRow","celled","table","textAlign","Header","HeaderCell","Body","renderMaintenanceMenu","renderCreateStudentMenu","Container","text","Field","placeholder","loading","primary","renderBody","_this$state","activeItem","className","Menu","fixed","Item","active","handleItemClick","menu","pointing","menuBody","lib","marginTop","padding","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.417a16d1.chunk.js","sourcesContent":["export const env = {\r\n  \"url\": \"https://student-housing-backend-wadahesam.c9users.io/api\"\r\n}","import React, { Component } from 'react';\r\nimport { Table, TextArea, Button, Form } from 'semantic-ui-react';\r\nimport axios from 'axios';\r\nimport qs from 'querystring';\r\nimport { env } from '../env';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nclass ComplaintRow extends Component {\r\n  state = {\r\n    replay: null,\r\n  }\r\n\r\n  closeComplaint = () => {\r\n    axios.post(`${env.url}/closeComplaint`, qs.stringify({ complaint_id: this.props.complaint.id }))\r\n    .then((response) =>{\r\n      this.props.fetchStuff();\r\n      toast.success('Complaint has been closed', {\r\n        position: \"bottom-right\",\r\n        autoClose: 3000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n      });\r\n    });\r\n  }\r\n\r\n  replayToComplaint = () => {\r\n    axios.post(`${env.url}/replayToComplaint`, qs.stringify({ complaint_id: this.props.complaint.id, replay: this.state.replay }))\r\n    .then((response) =>{\r\n      this.props.fetchStuff();\r\n      toast.success('Reply submitted to the complaint', {\r\n        position: \"bottom-right\",\r\n        autoClose: 3000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { complaint } = this.props;\r\n    return(\r\n      <Table.Row key={complaint.id} disabled={(complaint.status === \"closed\")}>\r\n        <Table.Cell><h4>{complaint.id}</h4></Table.Cell>\r\n        <Table.Cell><h3>{complaint.title}</h3></Table.Cell>\r\n        <Table.Cell>{complaint.description}</Table.Cell>\r\n        <Table.Cell>{complaint.created_at}</Table.Cell>\r\n        <Table.Cell>{complaint.student.name}</Table.Cell>\r\n        <Table.Cell>\r\n          {\r\n            (complaint.replay) ? \r\n            complaint.replay : \r\n            <div>\r\n              <Form onSubmit={(data) => {this.replayToComplaint(complaint.id, data)}}>\r\n                <TextArea rows=\"2\" autoHeight onChange={(e) => {this.setState({replay: e.target.value})}} style={styles.tableTextArea}/>\r\n                <Button type=\"submit\" size=\"small\" fluid>Replay</Button>\r\n              </Form>\r\n\r\n            </div>\r\n          }\r\n        </Table.Cell>\r\n        <Table.Cell>\r\n          {\r\n            (complaint.status === \"open\") ?\r\n            <Button inverted size=\"large\" color=\"red\" onClick={this.closeComplaint}>Close</Button> :\r\n            <Button inverted size=\"large\" disabled color=\"red\">Closed</Button>\r\n          }\r\n        </Table.Cell>\r\n      </Table.Row>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = {\r\n  tableTextArea: {\r\n    borderRadius: 5, \r\n    width: '100%',\r\n  }\r\n}\r\n\r\nexport default ComplaintRow;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { Button, Menu, Table, Container, Form, Header } from 'semantic-ui-react';\r\nimport axios from 'axios';\r\nimport qs from 'querystring';\r\nimport { env } from './env';\r\nimport ComplaintRow from './components/ComponentRow';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nclass App extends Component {\r\n  state = { \r\n    navActiveItem: 'home',\r\n    menuActiveItem: 'complaints',\r\n    studentName: '',\r\n    studentEmail: '',\r\n    studentPassword: '',\r\n    creatingStudentAccount: false,\r\n    complaints: [],\r\n  }\r\n\r\n  handleNaveItemClick = (e, { name }) => this.setState({ navActiveItem: name })\r\n  handleMenuItemClick = (e, { name }) => this.setState({ menuActiveItem: name })\r\n\r\n  componentWillMount() {\r\n    this.fetchStuff();\r\n  }\r\n\r\n  fetchStuff = async () => {\r\n    const complaints = await axios.post(`${env.url}/getAllComplaints`);\r\n    this.setState({\r\n      complaints: complaints.data,\r\n    });\r\n    console.log(this.state);\r\n  }\r\n\r\n  createStudnet = async (e) => {\r\n    e.preventDefault();\r\n    const name = this.state.studentName;\r\n    const email = this.state.studentEmail;\r\n    const password = this.state.studentPassword;\r\n    const password_confirmation = this.state.studentPassword;\r\n    this.setState({creatingStudentAccount: true});\r\n    axios.post(`${env.url}/createStudentAccount`, qs.stringify({name, email, password, password_confirmation}))\r\n    .then(response => {\r\n      console.log(response.data);\r\n      this.setState({\r\n        creatingStudentAccount: false,\r\n        studentEmail: '',\r\n        studentName: '',\r\n        studentPassword: '',\r\n      });\r\n      toast.success('New student has been created', {\r\n        position: \"bottom-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n      });\r\n    })\r\n    .catch(error => {\r\n      this.setState({creatingStudentAccount: false});\r\n      toast.error(`${error}`, {\r\n        position: \"bottom-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n      });\r\n    })\r\n  }\r\n\r\n  ////////////////////////////////////////////////////////////////////////////////////// Complaint Menu\r\n  renderComplaintsMenu = () => {\r\n    const complaints = this.state.complaints.map((complaint) => {\r\n      return (\r\n        <ComplaintRow complaint={complaint} key={complaint.id} fetchStuff={this.fetchStuff} />\r\n      );\r\n    })\r\n    return (\r\n      <Table celled style={styles.table} textAlign=\"center\">\r\n        <Table.Header>\r\n          <Table.Row>\r\n            <Table.HeaderCell>ID</Table.HeaderCell>\r\n            <Table.HeaderCell>Title</Table.HeaderCell>\r\n            <Table.HeaderCell>Description</Table.HeaderCell>\r\n            <Table.HeaderCell>Date</Table.HeaderCell>\r\n            <Table.HeaderCell>By</Table.HeaderCell>\r\n            <Table.HeaderCell>Replay</Table.HeaderCell>\r\n            <Table.HeaderCell>Status</Table.HeaderCell>\r\n          </Table.Row>\r\n        </Table.Header>\r\n        <Table.Body>\r\n          {complaints}\r\n        </Table.Body>\r\n      </Table>\r\n    );\r\n  }\r\n  ////////////////////////////////////////////////////////////////////////////////////// END Complaint Menu\r\n\r\n  renderMaintenanceMenu = () => {\r\n    return (\r\n      <div>Mentainance</div>\r\n    );\r\n  }\r\n\r\n  renderCreateStudentMenu = () => {\r\n    return (\r\n      <Container text textAlign=\"left\">\r\n        <Header>Create Student Account</Header>\r\n        <Form onSubmit={this.createStudnet}>\r\n          <Form.Field>\r\n            <label>Name</label>\r\n            <input \r\n            placeholder='Name' \r\n            value={this.state.studentName} \r\n            onChange={e => {this.setState({studentName: e.target.value})}} \r\n            />\r\n          </Form.Field>\r\n          <Form.Field>\r\n            <label>Email</label>\r\n            <input \r\n            placeholder='Email' \r\n            type=\"email\" \r\n            value={this.state.studentEmail} \r\n            onChange={e => {this.setState({studentEmail: e.target.value})}} \r\n            />\r\n          </Form.Field>\r\n          <Form.Field>\r\n            <label>Password</label>\r\n            <input \r\n            placeholder='Password' \r\n            type=\"password\" \r\n            value={this.state.studentPassword} \r\n            onChange={e => {this.setState({studentPassword: e.target.value})}} \r\n            />\r\n          </Form.Field>\r\n          <Button loading={this.state.creatingStudentAccount} primary type='submit'>Create Student</Button>\r\n        </Form>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  renderBody = () => {\r\n    switch (this.state.menuActiveItem) {\r\n      case 'maintenance requests':\r\n        return this.renderMaintenanceMenu();\r\n      case 'create student': \r\n        return this.renderCreateStudentMenu();\r\n      default: \r\n        return this.renderComplaintsMenu();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { activeItem, menuActiveItem } = this.state\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        {/* Nav Section */}\r\n        <div>\r\n          <Menu inverted fixed=\"top\" size='large'>\r\n            <Menu.Item name='home' active={activeItem === 'home'} onClick={this.handleItemClick} />\r\n            <Menu.Menu position='right'>\r\n              <Menu.Item>\r\n                <Button color=\"green\">Admin Panel</Button>\r\n              </Menu.Item>\r\n            </Menu.Menu>\r\n          </Menu>\r\n        </div>\r\n\r\n        {/* Menu Section */}\r\n        <div style={styles.menu}>\r\n          <Menu pointing>\r\n            <Menu.Item \r\n              name='complaints' \r\n              active={menuActiveItem === 'complaints'} \r\n              onClick={this.handleMenuItemClick} \r\n            />\r\n            <Menu.Item\r\n              name='maintenance requests'\r\n              active={menuActiveItem === 'maintenance requests'}\r\n              onClick={this.handleMenuItemClick}\r\n            />\r\n            <Menu.Item\r\n              name='create student'\r\n              active={menuActiveItem === 'create student'}\r\n              onClick={this.handleMenuItemClick}\r\n            />\r\n          </Menu>\r\n        </div>\r\n\r\n        {/* Meru Body Section */}\r\n        <div style={styles.menuBody}>\r\n          {this.renderBody()}\r\n        </div>\r\n        <ToastContainer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = {\r\n  menu: {\r\n    marginTop: 60,\r\n    padding: 20,\r\n  },\r\n  menuBody: {\r\n    padding: 20,\r\n    marginTop: -20,\r\n  },\r\n  tableTextArea: {\r\n    borderRadius: 5, \r\n    width: '100%',\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}